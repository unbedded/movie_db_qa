[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "movie-db-qa"
dynamic = ["version"]
description = "Movie database QA automation project"
authors = [{name = "Spencer Barrett", email = "your.email@example.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-html>=4.0",
    "playwright>=1.40",
    "pytest-playwright>=0.4",
    "mypy>=1.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0",
    "black>=23.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/movie-db-qa"
Repository = "https://github.com/yourusername/movie-db-qa.git"
Issues = "https://github.com/yourusername/movie-db-qa/issues"

[tool.setuptools.dynamic]
version = {file = "VERSION"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.pytest-cov]
branch = true
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "D",    # pydocstyle
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]  # Don't require docstrings in tests
"__init__.py" = ["D104"]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true

# Keep tests lighter if you prefer:
[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
warn_return_any = false
warn_unused_ignores = false

[tool.black]
line-length = 120
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
